//
// File generated by HDevelop for HALCON/.NET (C#) Version 23.11.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

  // Procedures 
#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_ImageArray, ho_Image, ho_ImageDisp=null;
    HObject ho_Depth, ho_Confidence, ho_DepthScaleMax, ho_Sharp;
    HObject ho_ImageScaled, ho_MultiChannelImage;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_Names = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageArray);
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageDisp);
    HOperatorSet.GenEmptyObj(out ho_Depth);
    HOperatorSet.GenEmptyObj(out ho_Confidence);
    HOperatorSet.GenEmptyObj(out ho_DepthScaleMax);
    HOperatorSet.GenEmptyObj(out ho_Sharp);
    HOperatorSet.GenEmptyObj(out ho_ImageScaled);
    HOperatorSet.GenEmptyObj(out ho_MultiChannelImage);
    try
    {
      dev_update_off();
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.CloseWindow(HDevWindowStack.Pop());
      }
      if (HDevWindowStack.IsOpen())
      {
        hv_WindowHandle = HDevWindowStack.GetActive();
      }
      set_display_font(hv_WindowHandle, 16, "mono", "true", "false");
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetPaint(HDevWindowStack.GetActive(), "default");
      }
      //Read the sequence of images
      disp_message(hv_WindowHandle, "Read a sequence of focus images ...", "image", 
          20, 20, "white", "false");
      hv_Names.Dispose();
      list_image_files("F:/3D/DepthFromFocus/DepthFromFocus/Origin", "default", new HTuple(), 
          out hv_Names);
      ho_ImageArray.Dispose();
      HOperatorSet.ReadImage(out ho_ImageArray, hv_Names);
      ho_Image.Dispose();
      HOperatorSet.ChannelsToImage(ho_ImageArray, out ho_Image);
      // stop(...); only in hdevelop
      for (hv_Index=20; (int)hv_Index<=107; hv_Index = (int)hv_Index + 1)
      {
        ho_ImageDisp.Dispose();
        HOperatorSet.AccessChannel(ho_Image, out ho_ImageDisp, hv_Index);
        if (HDevWindowStack.IsOpen())
        {
          HOperatorSet.DispObj(ho_ImageDisp, HDevWindowStack.GetActive());
        }
        HOperatorSet.WaitSeconds(0.1);
      }
      //Compute the depth map and display results
      if (HDevWindowStack.IsOpen())
      {
        //dev_display (ImageDisp)
      }
      //disp_message (WindowHandle, 'Compute the depth map', 'image', 20, 20, 'white', 'false')
      ho_Depth.Dispose();ho_Confidence.Dispose();
      HOperatorSet.DepthFromFocus(ho_Image, out ho_Depth, out ho_Confidence, ((new HTuple("bandpass")).TupleConcat(
          3)).TupleConcat(3), "next_maximum");
      ho_DepthScaleMax.Dispose();
      HOperatorSet.ScaleImageMax(ho_Depth, out ho_DepthScaleMax);
      ho_Sharp.Dispose();
      HOperatorSet.SelectGrayvaluesFromChannels(ho_Image, ho_Depth, out ho_Sharp);
      ho_ImageScaled.Dispose();
      HOperatorSet.ScaleImage(ho_Sharp, out ho_ImageScaled, 8, 0);
      ho_MultiChannelImage.Dispose();
      HOperatorSet.Compose2(ho_DepthScaleMax, ho_ImageScaled, out ho_MultiChannelImage
          );
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
      }
      if (HDevWindowStack.IsOpen())
      {
        //dev_set_paint (['3d_plot', 'texture'])
      }
      if (HDevWindowStack.IsOpen())
      {
        //dev_display (MultiChannelImage)
      }
      //disp_message (WindowHandle, '3D reconstruction of IGBT', 'image', 20, 280, 'white', 'false')
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageArray.Dispose();
      ho_Image.Dispose();
      ho_ImageDisp.Dispose();
      ho_Depth.Dispose();
      ho_Confidence.Dispose();
      ho_DepthScaleMax.Dispose();
      ho_Sharp.Dispose();
      ho_ImageScaled.Dispose();
      ho_MultiChannelImage.Dispose();

      hv_WindowHandle.Dispose();
      hv_Names.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
    ho_ImageArray.Dispose();
    ho_Image.Dispose();
    ho_ImageDisp.Dispose();
    ho_Depth.Dispose();
    ho_Confidence.Dispose();
    ho_DepthScaleMax.Dispose();
    ho_Sharp.Dispose();
    ho_ImageScaled.Dispose();
    ho_MultiChannelImage.Dispose();

    hv_WindowHandle.Dispose();
    hv_Names.Dispose();
    hv_Index.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

